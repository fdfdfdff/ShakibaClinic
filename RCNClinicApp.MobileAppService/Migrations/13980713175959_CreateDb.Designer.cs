// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RCNClinicApp;

namespace RCNClinicApp.MobileAppService.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("13980713175959_CreateDb")]
    partial class CreateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RCNClinicApp.tblPicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filepath")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<long>("IdVisit");

                    b.HasKey("Id");

                    b.HasIndex("IdVisit");

                    b.ToTable("tblPicture");
                });

            modelBuilder.Entity("RCNClinicApp.tblReception", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlergyDrug")
                        .HasMaxLength(1500);

                    b.Property<string>("ExperienceBlood")
                        .HasMaxLength(1500);

                    b.Property<string>("ExperienceOfBeauty")
                        .HasMaxLength(1500);

                    b.Property<int?>("IdDoctor");

                    b.Property<int?>("IdGeneralGroup");

                    b.Property<int?>("IdInsure");

                    b.Property<long>("IdPatient");

                    b.Property<int>("IdService");

                    b.Property<int?>("IdWaiting");

                    b.Property<string>("KnowledgeOfOperation")
                        .HasMaxLength(1500);

                    b.Property<string>("PenSatisfaction")
                        .HasMaxLength(1500);

                    b.Property<string>("PhysicalProblem")
                        .HasMaxLength(1500);

                    b.Property<string>("ProblemOfOpearation")
                        .HasMaxLength(1500);

                    b.Property<DateTime>("RegDate");

                    b.Property<string>("Sign")
                        .HasMaxLength(1500);

                    b.Property<string>("UsageDrugs")
                        .HasMaxLength(1500);

                    b.Property<string>("WhatCases")
                        .HasMaxLength(1500);

                    b.Property<string>("WhatTimeWhatDo")
                        .HasMaxLength(1500);

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdGeneralGroup");

                    b.HasIndex("IdPatient");

                    b.HasIndex("IdService");

                    b.HasIndex("IdWaiting");

                    b.ToTable("tblReception");
                });

            modelBuilder.Entity("RCNClinicApp.tblVisit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("Count");

                    b.Property<DateTime?>("DateRequest");

                    b.Property<double?>("FreePrices");

                    b.Property<long>("IdReception");

                    b.Property<int?>("IdWaiting");

                    b.Property<double?>("Percents");

                    b.Property<double?>("Tariff");

                    b.Property<DateTime>("VisitDate");

                    b.HasKey("Id");

                    b.HasIndex("IdReception");

                    b.HasIndex("IdWaiting");

                    b.ToTable("tblVisit");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Account", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Branch");

                    b.Property<string>("NameBank")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NumAccount")
                        .IsUnicode(false);

                    b.Property<string>("NumCard")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbl_Account");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Advertising", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdService");

                    b.Property<long>("IdVisit");

                    b.Property<bool?>("IsSend");

                    b.Property<DateTime>("SendDate");

                    b.HasKey("Id");

                    b.HasIndex("IdService");

                    b.HasIndex("IdVisit");

                    b.ToTable("tbl_Advertising");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Dual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("tbl_Dual");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_GeneralGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<int?>("IdType");

                    b.Property<int?>("IdTypeward");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Tel")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdType");

                    b.HasIndex("IdTypeward");

                    b.ToTable("tbl_GeneralGroups");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Information", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress");

                    b.Property<string>("FolderPath");

                    b.Property<string>("Header")
                        .HasMaxLength(500);

                    b.Property<string>("ImagePath");

                    b.Property<string>("ServerAdress")
                        .HasMaxLength(500);

                    b.Property<string>("Tell")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tbl_Information");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_InsurOrg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("tbl_InsurOrg");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Insure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsFixedLength(true)
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int?>("IdInsureOrg");

                    b.Property<string>("InsureCDName")
                        .HasMaxLength(300);

                    b.Property<bool?>("IsDelete");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int?>("Percents");

                    b.Property<int?>("percentBed");

                    b.HasKey("Id");

                    b.HasIndex("IdInsureOrg");

                    b.ToTable("tbl_Insure");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_InsureAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime?>("DateEdit");

                    b.Property<DateTime?>("DateSave");

                    b.Property<string>("Description");

                    b.Property<int?>("IdInsurence");

                    b.Property<double?>("Price");

                    b.Property<int?>("WhoEdit");

                    b.Property<int?>("WhoSave");

                    b.HasKey("Id");

                    b.HasIndex("IdInsurence");

                    b.HasIndex("WhoEdit");

                    b.HasIndex("WhoSave");

                    b.ToTable("tbl_InsureAccount");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_SMS", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IdVisit");

                    b.Property<bool?>("IsSend");

                    b.Property<DateTime>("SendDate");

                    b.HasKey("Id");

                    b.HasIndex("IdVisit");

                    b.ToTable("tbl_SMS");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasMaxLength(15);

                    b.Property<int?>("Code");

                    b.Property<double?>("FreePrices");

                    b.Property<int?>("IdGeneral_Group");

                    b.Property<int?>("IdType");

                    b.Property<bool?>("IsConflict");

                    b.Property<bool?>("IsDelete");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<string>("Nationcode")
                        .HasMaxLength(50);

                    b.Property<string>("Unit")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("IdGeneral_Group");

                    b.HasIndex("IdType");

                    b.ToTable("tbl_Service");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Tankhah", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime?>("DateEdit");

                    b.Property<DateTime?>("DateSave");

                    b.Property<string>("Description");

                    b.Property<int?>("IdGeneralGroup");

                    b.Property<string>("Payer")
                        .HasMaxLength(100);

                    b.Property<double?>("Price");

                    b.Property<int?>("WhoEdit");

                    b.Property<int?>("WhoSave");

                    b.HasKey("Id");

                    b.HasIndex("IdGeneralGroup");

                    b.HasIndex("WhoEdit");

                    b.HasIndex("WhoSave");

                    b.ToTable("tbl_Tankhah");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("tbl_Type");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("IdGeneralGroup");

                    b.Property<bool?>("IsDelete");

                    b.Property<bool?>("IsDr");

                    b.Property<string>("Password")
                        .HasMaxLength(500);

                    b.Property<int?>("PersonnelOrDrId");

                    b.Property<string>("UserCommand")
                        .HasColumnType("ntext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("IdGeneralGroup");

                    b.ToTable("tbl_Users");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Users_Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UsersId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UsersId");

                    b.ToTable("tbl_Users_Role");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_cash_AllTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("AccountId");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime?>("DateDelete");

                    b.Property<DateTime?>("DateEdit");

                    b.Property<DateTime?>("DateSave");

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<int?>("IdPayType");

                    b.Property<long?>("IdReception");

                    b.Property<bool?>("IsConfirm");

                    b.Property<string>("SerialNum")
                        .HasMaxLength(25);

                    b.Property<int?>("WhoEdit");

                    b.Property<int?>("WhoSave");

                    b.Property<string>("payer")
                        .HasMaxLength(100);

                    b.Property<double?>("payment");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("IdPayType");

                    b.HasIndex("IdReception");

                    b.HasIndex("WhoEdit");

                    b.HasIndex("WhoSave");

                    b.ToTable("tbl_cash_AllTransaction");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_cashrecords", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime?>("DateEdit");

                    b.Property<DateTime?>("DateSave");

                    b.Property<long?>("IdReception");

                    b.Property<double?>("TotalPrice");

                    b.Property<int?>("WhoEdit");

                    b.Property<int?>("WhoSave");

                    b.HasKey("Id");

                    b.HasIndex("IdReception");

                    b.HasIndex("WhoEdit");

                    b.HasIndex("WhoSave");

                    b.ToTable("tbl_cashrecords");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_docter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress");

                    b.Property<int?>("CalculationType");

                    b.Property<int?>("IdGenereal_Group");

                    b.Property<int?>("IdSpecialityDr");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50);

                    b.Property<string>("MedicalCouncil")
                        .HasMaxLength(20);

                    b.Property<string>("Mobile")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<double?>("PercentOrConstValue");

                    b.Property<string>("Pic")
                        .HasMaxLength(100);

                    b.Property<string>("Tel")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("CalculationType");

                    b.HasIndex("IdGenereal_Group");

                    b.HasIndex("IdSpecialityDr");

                    b.ToTable("tbl_docter");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("DossierNumberPermanent")
                        .HasMaxLength(50);

                    b.Property<string>("DossierNumberTemporary")
                        .HasMaxLength(50);

                    b.Property<string>("Education")
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .HasMaxLength(50);

                    b.Property<int?>("IDFirstInsure");

                    b.Property<int>("IdSex");

                    b.Property<string>("InsurenceBookletNum")
                        .HasMaxLength(50);

                    b.Property<string>("Job")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Moaref")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PathPic")
                        .HasMaxLength(150);

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("birthDay")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("IdSex");

                    b.ToTable("tbl_patient");
                });

            modelBuilder.Entity("RCNClinicApp.tblPicture", b =>
                {
                    b.HasOne("RCNClinicApp.tblVisit", "tblVisit")
                        .WithMany("tblPictures")
                        .HasForeignKey("IdVisit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCNClinicApp.tblReception", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_docter", "tbl_docter")
                        .WithMany("tblReceptions")
                        .HasForeignKey("IdDoctor");

                    b.HasOne("RCNClinicApp.tbl_GeneralGroups", "tbl_GeneralGroups")
                        .WithMany("tblReceptions")
                        .HasForeignKey("IdGeneralGroup");

                    b.HasOne("RCNClinicApp.tbl_patient", "tbl_patient")
                        .WithMany("tblReceptions")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RCNClinicApp.tbl_Service", "tbl_Service")
                        .WithMany("tblReceptions")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_Dual")
                        .WithMany("tblReceptions")
                        .HasForeignKey("IdWaiting");
                });

            modelBuilder.Entity("RCNClinicApp.tblVisit", b =>
                {
                    b.HasOne("RCNClinicApp.tblReception", "tblReception")
                        .WithMany("tblVisits")
                        .HasForeignKey("IdReception")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_Dual")
                        .WithMany("tblVisits")
                        .HasForeignKey("IdWaiting");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Advertising", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_Service", "tbl_Service")
                        .WithMany("tbl_Advertising")
                        .HasForeignKey("IdService");

                    b.HasOne("RCNClinicApp.tblVisit", "tblVisit")
                        .WithMany("tbl_Advertising")
                        .HasForeignKey("IdVisit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Dual", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_Type", "tbl_Type")
                        .WithMany("tbl_Dual")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_GeneralGroups", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_DualType")
                        .WithMany("tbl_GeneralGroupType")
                        .HasForeignKey("IdType");

                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_DualTypeWard")
                        .WithMany("tbl_GeneralGroupTypeWard")
                        .HasForeignKey("IdTypeward");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Insure", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_InsurOrg", "tbl_InsurOrg")
                        .WithMany("tbl_Insure")
                        .HasForeignKey("IdInsureOrg");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_InsureAccount", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_Insure", "tbl_Insure")
                        .WithMany("tbl_InsureAccount")
                        .HasForeignKey("IdInsurence");

                    b.HasOne("RCNClinicApp.tbl_Users", "tbl_UserEdit")
                        .WithMany("tbl_InsureAccountEdit")
                        .HasForeignKey("WhoEdit");

                    b.HasOne("RCNClinicApp.tbl_Users", "tbl_UsersSave")
                        .WithMany("tbl_InsureAccountSave")
                        .HasForeignKey("WhoSave");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_SMS", b =>
                {
                    b.HasOne("RCNClinicApp.tblVisit", "tblVisit")
                        .WithMany("tbl_SMS")
                        .HasForeignKey("IdVisit")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Service", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_GeneralGroups", "tbl_GeneralGroups")
                        .WithMany("tbl_Service")
                        .HasForeignKey("IdGeneral_Group");

                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_Dual")
                        .WithMany("tbl_Service")
                        .HasForeignKey("IdType");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Tankhah", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_GeneralGroups", "tbl_GeneralGroups")
                        .WithMany("tbl_Tankhah")
                        .HasForeignKey("IdGeneralGroup");

                    b.HasOne("RCNClinicApp.tbl_Users", "tbl_UserEdit")
                        .WithMany("tbl_TankhahEdit")
                        .HasForeignKey("WhoEdit");

                    b.HasOne("RCNClinicApp.tbl_Users", "tbl_UsersSave")
                        .WithMany("tbl_TankhahSave")
                        .HasForeignKey("WhoSave");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Users", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_GeneralGroups", "tbl_GeneralGroups")
                        .WithMany("tbl_Users")
                        .HasForeignKey("IdGeneralGroup");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_Users_Role", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_Dual")
                        .WithMany("tbl_Users_Role")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RCNClinicApp.tbl_Users", "tbl_Users")
                        .WithMany("tbl_Users_Role")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RCNClinicApp.tbl_cash_AllTransaction", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_Account", "tbl_Account")
                        .WithMany("tbl_cash_AllTransaction")
                        .HasForeignKey("AccountId");

                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_Dual")
                        .WithMany("tbl_cash_AllTransaction")
                        .HasForeignKey("IdPayType");

                    b.HasOne("RCNClinicApp.tblReception", "tblReception")
                        .WithMany("tbl_cash_AllTransaction")
                        .HasForeignKey("IdReception");

                    b.HasOne("RCNClinicApp.tbl_Users", "tbl_UserEdit")
                        .WithMany("tbl_cash_AllTransactionEdit")
                        .HasForeignKey("WhoEdit");

                    b.HasOne("RCNClinicApp.tbl_Users", "tbl_UsersSave")
                        .WithMany("tbl_cash_AllTransactionSave")
                        .HasForeignKey("WhoSave");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_cashrecords", b =>
                {
                    b.HasOne("RCNClinicApp.tblReception", "tblReception")
                        .WithMany("tbl_cashrecords")
                        .HasForeignKey("IdReception");

                    b.HasOne("RCNClinicApp.tbl_Users", "tbl_UserEdit")
                        .WithMany("tbl_cashrecordEdit")
                        .HasForeignKey("WhoEdit");

                    b.HasOne("RCNClinicApp.tbl_Users", "tbl_UsersSave")
                        .WithMany("tbl_cashrecordsSave")
                        .HasForeignKey("WhoSave");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_docter", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_DualCalcType")
                        .WithMany("tbl_docterCalcType")
                        .HasForeignKey("CalculationType");

                    b.HasOne("RCNClinicApp.tbl_GeneralGroups", "tbl_GeneralGroups")
                        .WithMany("tbl_docter")
                        .HasForeignKey("IdGenereal_Group");

                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_DualSpeciality")
                        .WithMany("tbl_docterSpeciality")
                        .HasForeignKey("IdSpecialityDr");
                });

            modelBuilder.Entity("RCNClinicApp.tbl_patient", b =>
                {
                    b.HasOne("RCNClinicApp.tbl_Dual", "tbl_Dual")
                        .WithMany("tbl_patient")
                        .HasForeignKey("IdSex")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
